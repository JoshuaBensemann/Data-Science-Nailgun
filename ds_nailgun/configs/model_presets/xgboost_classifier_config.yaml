# XGBoost Classifier Model Configuration

model:
  type: XGBClassifier
  library: xgboost
  parameters:
    n_estimators: 1000  # Increased for early stopping
    max_depth: 6
    learning_rate: 0.1
    subsample: 0.8
    colsample_bytree: 0.8
    random_state: 1986
    verbosity: 1  # Reduced verbosity: 0=silent, 1=warning, 2=info, 3=debug
    n_jobs: -1  # Use all available CPU cores

# Optional hyperparameter tuning configuration
hypertuning:
  method: "halving_random_search"  # Successive halving with random search for efficient large-scale optimization
  n_candidates: 100  # Number of candidate parameter combinations to evaluate initially
  parameters:
    max_depth: [3, 4, 5, 6, 7, 8, 9, 10, 12]
    learning_rate: [0.005, 0.01, 0.02, 0.05, 0.1, 0.15, 0.2, 0.3]
    subsample: [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    colsample_bytree: [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    gamma: [0, 0.1, 0.2, 0.3, 0.5, 1.0]  # Minimum loss reduction
    min_child_weight: [1, 3, 5, 7, 10]  # Minimum sum of instance weight
    reg_alpha: [0, 0.001, 0.01, 0.1, 1.0]  # L1 regularization
    reg_lambda: [0.1, 0.5, 1.0, 1.5, 2.0]  # L2 regularization
    verbosity: [0]  # Silent during tuning
  cv: 3  # Cross-validation folds
  scoring:
    name: 'accuracy'
  n_jobs: 1  # Halving search doesn't parallelize well
  factor: 3  # Halving factor - eliminate 2/3 of candidates each round
  resource: 'n_estimators'  # Resource parameter to optimize (number of trees)
  max_resources: 1000  # Maximum resources (n_estimators) to use
  min_resources: 50  # Minimum resources to start with