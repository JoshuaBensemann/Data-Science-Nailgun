# XGBoost Quantile Regression Model Configuration (q=0.5)

model:
  type: XGBRegressor
  library: xgboost
  parameters:
    n_estimators: 500  # Reduced from 1000 for faster training
    max_depth: 6
    learning_rate: 0.1
    subsample: 0.8
    colsample_bytree: 0.8
    random_state: 1986
    tree_method: 'hist'  # Use histogram-based algorithm for faster training
    reg_alpha: 0.0  # L1 regularization
    reg_lambda: 1.0  # L2 regularization
    verbosity: 0  # Silent mode
    n_jobs: -1  # Use all available CPU cores
    # Quantile regression specific parameters
    objective: 'reg:quantileerror'
    quantile_alpha: 0.5  # Quantile level (0.5 = 50th percentile)

hypertuning:
  method: "halving_random_search"  # Successive halving with random search for efficient large-scale optimization
  verbose: 2  # Verbose search progress
  n_candidates: 50  # Extensive number of candidates for thorough search
  parameters:
    max_depth: [3, 4, 6, 8, 10, 12]  # Extended depth range
    learning_rate: [0.005, 0.01, 0.05, 0.1, 0.2, 0.3]  # Broader learning rate range
    subsample: [0.6, 0.7, 0.8, 0.9, 1.0]  # Extended subsample range
    colsample_bytree: [0.6, 0.7, 0.8, 0.9, 1.0]  # Extended feature fraction range
    gamma: [0, 0.1, 0.2, 0.5, 1.0]  # Extended minimum loss reduction
    min_child_weight: [1, 3, 5, 10, 20]  # Extended minimum child weight
    reg_alpha: [0, 0.001, 0.01, 0.1, 1.0, 10.0]  # Extended L1 regularization
    reg_lambda: [0.1, 0.5, 1.0, 1.5, 2.0, 5.0]  # Extended L2 regularization
    verbosity: [0]  # Silent models during tuning
  cv: 3  # Cross-validation folds
  scoring:
    name: 'pinball_loss'
    alpha: 0.5  # Quantile level for pinball loss scoring
  n_jobs: 1  # Halving search doesn't parallelize well
  factor: 3  # Halving factor - eliminate 2/3 of candidates each round
  resource: 'n_samples'  # Resource parameter to optimize (number of training samples)